using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Net;
using System.Net.Http;
using System.Configuration;
using BusinessEntities;
using MySql.Data.MySqlClient;
using System.Globalization;
using System.Threading;


namespace DataAccess
{
    public class SalesOrderFormDBAccess
    {
        int mnrestult, mnresult1 = 0;
        MySqlCommand cmd = new MySqlCommand();
        MySqlDataReader rd;
        string error;
        public SalesOrderForm Customer()
        {
            SalesOrderForm sof = new SalesOrderForm();
            try
            {
                cmd = new MySqlCommand("sp_sel_customer");
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                //cmd.Parameters.AddWithValue("p_customer_type",val);
                rd = DBAccess.ExecuteReader(cmd);
                var summary = new List<Customerlist>();
                if (rd.HasRows == true)
                {
                    while (rd.Read())
                    {
                        summary.Add(new Customerlist
                        {
                            customer_gid = rd["customer_gid"].ToString(),
                            customer_name = rd["cutomer_name"].ToString(),
                            contact_number = rd["contact_number"].ToString(),
                            email_address = rd["email_address"].ToString(),
                            national_id = rd["national_id"].ToString(),
                            billing_address = rd["billing_address"].ToString()
                        });
                    }
                    sof.customerList = summary;
                    
                }
                rd.Close();
            }
            catch (Exception ex)
            {
                sof.status = false;
                sof.message = "Customer Details Not Loaded";
                error = ex.ToString();
            }
            finally
            {
                if (cmd.Connection.State == System.Data.ConnectionState.Open)
                {
                    cmd.Connection.Close();
                }

            }
            return sof;
        }

        public SalesOrderForm Activity(SOActivityList val)
        {
            SalesOrderForm sof = new SalesOrderForm();
            try
            {
                cmd = new MySqlCommand("sp_sel_salesorderformtoactivitysummary");
                cmd.Parameters.AddWithValue("p_salesorder_gid", val.salesorder_gid);
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                rd = DBAccess.ExecuteReader(cmd);
                var summary = new List<SOActivityList>();
                if (rd.HasRows == true)
                {
                    while (rd.Read())
                    {
                        summary.Add(new SOActivityList
                        {
                            salesactivity_gid = rd["salesactivity_gid"].ToString(), // serviceid as salesactivity_gid 
                            salesorder_gid = rd["salesorder_gid"].ToString(),
                            service_type = rd["service_type"].ToString(),
                            reference = rd["reference"].ToString(),
                            remarks = rd["remarks"].ToString(),
                            Status = rd["status"].ToString(),
                            Amount = rd["amount"].ToString()
                        });
                    }
                    sof.SOActivityList = summary;
                    sof.status = true;
                }
                rd.Close();
            }
            catch (Exception ex)
            {
                sof.status = false;
                sof.message = "Activity Details Not Loaded";
                error = ex.ToString();
            }
            finally
            {
                if (cmd.Connection.State == System.Data.ConnectionState.Open)
                {
                    cmd.Connection.Close();
                }

            }
            return sof;
        }
        public SalesOrderForm passanger(SOPassangerList val)
        {
            SalesOrderForm sof = new SalesOrderForm();
            try
            {
                cmd = new MySqlCommand("sp_sel_sopassenger");
                cmd.Parameters.AddWithValue("P_salesorder_gid", val.salesorder_gid);
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                rd = DBAccess.ExecuteReader(cmd);
                var summary = new List<SOPassangerList>();

                if (rd.HasRows == true)
                {
                    while (rd.Read())
                    {
                        summary.Add(new SOPassangerList
                        {
                            passengerservice_gid = rd["passengerservice_gid"].ToString(),
                            passenger_name = rd["passenger_name"].ToString(),
                            gender = rd["gender"].ToString(),
                            dob = rd["dob"].ToString(),
                            salesorder_gid = int.Parse(rd["salesorder_gid"].ToString()),
                            passport_number= rd["passport_number"].ToString(),
                            passport_expirydate = rd["passport_expirydate"].ToString(),
                            //passportissueddate = rd["passportissued_date"].ToString(),
                            status = true

                        });
                    }
                    
                    sof.SOPassangerList = summary;
                    sof.status = true;
                }
                rd.Close();
            }
            catch (Exception ex)
            {
                sof.status = false;
                sof.message = "Passanger Details Not Loaded";
                error = ex.ToString();
            }
            finally
            {
                if (cmd.Connection.State == System.Data.ConnectionState.Open)
                {
                    cmd.Connection.Close();
                }

            }
            return sof;
        }
        public SalesOrderForm Currency()
        {
            SalesOrderForm currency = new SalesOrderForm();
            try
            {
                cmd = new MySqlCommand("sp_sel_currency");
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                rd = DBAccess.ExecuteReader(cmd);
                var summary = new List<Currencylist>();
                if (rd.HasRows == true)
                {
                    while (rd.Read())
                    {
                        summary.Add(new Currencylist
                        {
                            currency_gid = int.Parse(rd["currency_gid"].ToString()),
                            currency_code = rd["currency_code"].ToString(),
                            currency_name = rd["currency_name"].ToString(),
                            country_code = rd["country_code"].ToString(),
                            country_name = rd["country_name"].ToString(),
                            currency_status = rd["currency_status"].ToString(),
                            currency_amount = Double.Parse(rd["currency_amount"].ToString()
                           )
                        });
                    }
                    
                    currency.Currencylist = summary;
                    currency.status = true;
                }
                else
                {
                    currency.status = false;
                    cmd.Connection.Close();

                }
                rd.Close();

            }
            catch (Exception ex)
            {
                currency.status = false;
                currency.message = "Internal Error Occured";
                error = ex.ToString();
            }
            finally
            {
                if (cmd.Connection.State == System.Data.ConnectionState.Open)
                {
                    cmd.Connection.Close();
                }
            }
            return currency;
        }
        public Customerdetails GetCustomer(Customerdetails val)
        {
            Customerdetails sof = new Customerdetails();
            try
            {
                cmd = new MySqlCommand("sp_sel_customerid");
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("P_customer_gid", val.customer_gid);
                rd = DBAccess.ExecuteReader(cmd);
                if (rd.HasRows == true)
                {
                    rd.Read();
                    sof.customer_gid = rd["customer_gid"].ToString();
                    sof.cutomer_name = rd["cutomer_name"].ToString();
                    sof.contact_number = rd["contact_number"].ToString();
                    sof.email_address = rd["email_address"].ToString();
                    sof.national_id = rd["national_id"].ToString();
                    sof.billing_address = rd["billing_address"].ToString();
                    //sof.currency = rd["currency_gid"].ToString();
                }
                
                sof.status = true;
                sof.message = "Customer Details Loaded Successfully";
                rd.Close();
            }
            catch (Exception ex)
            {
                sof.status = false;
                sof.message = "Customer Details Not Loaded";
                error = ex.ToString();
            }
            finally
            {
                if (cmd.Connection.State == System.Data.ConnectionState.Open)
                {
                    cmd.Connection.Close();
                }
            }
            return sof;
        }

        public SalesOrderForm PageLoad(string usergid)
        {
            SalesOrderForm sof = new SalesOrderForm();
            try
            {
                cmd = new MySqlCommand("sp_pl_salesorder");
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("p_user_gid", usergid);
                mnrestult = DBAccess.ExecuteNonQuery(cmd);

                if (mnrestult == 1)
                {
                    cmd = new MySqlCommand("sp_sel_salesorder_gid");
                    cmd.Parameters.AddWithValue("p_user_gid", usergid);
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    rd = DBAccess.ExecuteReader(cmd);

                    if (rd.Read())
                    {
                        sof.salesorder_gid = int.Parse(rd["salesorder_gid"].ToString());
                        sof.status = true;
                    }
                    else
                    {
                        sof.status = false;
                    }
                    rd.Close();
                }
            }

            catch (Exception ex)
            {
                sof.status = false;
                sof.message = "Internal Error Occured!";
                error = ex.ToString();
            }
            finally
            {
                if (cmd.Connection.State == System.Data.ConnectionState.Open)
                {
                    cmd.Connection.Close();
                }
            }
            return sof;
        }
        public SalesOrderForm Getall()
        {
            double total = 0;
            SalesOrderForm SOF = new SalesOrderForm();
            try
            {
                cmd = new MySqlCommand("sp_sel_salesorder");
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                rd = DBAccess.ExecuteReader(cmd);
                var summary = new List<SalesOrderFormList>();
                while (rd.Read())
                {
                    if(rd["total"] ==System.DBNull.Value)
                    {
                        total = 0;
                      
                    }
                    else
                    {
                        total = double.Parse(rd["total"].ToString());
                    }
                    summary.Add(new SalesOrderFormList
                    {
                        salesorder_gid = int.Parse(rd["salesorder_gid"].ToString()),
                        customer_name = rd["customer_name"].ToString(),
                        customer_gid = rd["customer_gid"].ToString(),
                        contact_number = rd["contact_number"].ToString(),                   
                        total = total,
                        salesorder_refnumber = rd["salesorder_refnumber"].ToString(),
                        created_by = rd["created_by"].ToString(),
                        created_date =rd["created_date"].ToString(),
                        branch_name = rd["branch_name"].ToString(),
                        salesorder_status = rd["salesorder_status"].ToString(),
                    
                    });
                }
                rd.Close();
                SOF.SalesOrderList = summary;
                SOF.status = true;
            }

            catch (Exception ex)
            {
                SOF.status = false;
                SOF.message = "Internal Error Occured!";
                error = ex.ToString();
            }
            finally
            {
                if (cmd.Connection.State == System.Data.ConnectionState.Open)
                {
                    cmd.Connection.Close();
                }
            }
            return SOF;
        }
        public SalesOrderForm salesorderforminvoicesummary()
        {
            SalesOrderForm SOF = new SalesOrderForm();
            try
            {
                cmd = new MySqlCommand("sp_sel_salesorderinvoicesummary");
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                rd = DBAccess.ExecuteReader(cmd);
                var summary = new List<SalesOrderFormList>();
                while (rd.Read())
                {
                    summary.Add(new SalesOrderFormList
                    {
                        salesorder_gid = int.Parse(rd["salesorder_gid"].ToString()),
                        customer_name = rd["customer_name"].ToString(),
                        customer_gid = rd["customer_gid"].ToString(),
                        contact_number = rd["contact_number"].ToString(),
                        total = double.Parse(rd["total"].ToString()),
                        salesorder_refnumber = rd["salesorder_refnumber"].ToString(),
                        created_by = rd["created_by"].ToString(),
                        created_date =rd["created_date"].ToString(),
                        billing_status = rd["billing_status"].ToString()
                    });
                }
                rd.Close();
                SOF.SalesOrderList = summary;
                SOF.status = true;
            }

            catch (Exception ex)
            {
                SOF.status = false;
                SOF.message = "Internal Error Occured!";
                error = ex.ToString();
            }
            finally
            {
                if (cmd.Connection.State == System.Data.ConnectionState.Open)
                {
                    cmd.Connection.Close();
                }
            }
            return SOF;
        }
        public SalesOrderFormModel PassengerAdd(SOPassengerDetail val, string usergid)
        {
            SalesOrderFormModel passenger = new SalesOrderFormModel();
            try
            {
                cmd = new MySqlCommand("sp_ins_sopassenger");
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("p_passenger_firstname", val.passanger_firstname);
                cmd.Parameters.AddWithValue("p_passenger_lastname", val.passanger_lastname);
                cmd.Parameters.AddWithValue("p_gender", val.gender);
                cmd.Parameters.AddWithValue("p_dob", val.dob);
                cmd.Parameters.AddWithValue("p_passport_number", val.passport_number);
                cmd.Parameters.AddWithValue("p_passportissued_date", val.passport_issueddate);
                cmd.Parameters.AddWithValue("p_passportexpiry_date", val.passport_expirydate);
                cmd.Parameters.AddWithValue("p_created_by", usergid);
                cmd.Parameters.AddWithValue("p_salesorder_gid", val.salesorder_gid);
                mnrestult = DBAccess.ExecuteNonQuery(cmd);
                if (mnrestult == 1)
                {
                    passenger.status = true;
                    passenger.message = "Added Successfully!";
                }
                else
                {
                    passenger.status = false;
                    passenger.message = "Internal Error Occured!";
                }
            }
            catch (Exception ex)
            {
                error = ex.ToString();
            }
            finally
            {
                if (cmd.Connection.State == System.Data.ConnectionState.Open)
                {
                    cmd.Connection.Close();
                }
            }
            return passenger;
        }

        public SalesOrderFormModel VisaAdd(SOVisaDetail val, string usergid)
        {
            SalesOrderFormModel visa = new SalesOrderFormModel();
            try
            {
                cmd = new MySqlCommand("sp_ins_sovisa");
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("p_salesorder_gid", val.salesorder_gid);
                cmd.Parameters.AddWithValue("p_passenger_name", "");
                cmd.Parameters.AddWithValue("p_passengerservice_gid", val.passengerservice_gid);
                cmd.Parameters.AddWithValue("p_country", val.country);
                cmd.Parameters.AddWithValue("p_application_date", val.application_date);
                cmd.Parameters.AddWithValue("p_visa_period", val.visa_period);
                cmd.Parameters.AddWithValue("p_expiry_date", val.expiry_date);
                cmd.Parameters.AddWithValue("p_currency", val.currency);
                cmd.Parameters.AddWithValue("p_amount", val.amount);
                cmd.Parameters.AddWithValue("p_created_by", usergid);
                cmd.Parameters.AddWithValue("p_passport_number", "");
                cmd.Parameters.AddWithValue("p_reference_gid", 0);
                mnrestult = DBAccess.ExecuteNonQuery(cmd);
                if (mnrestult == 1)
                {
                    visa.status = true;
                }
                else
                {
                    visa.status = false;
                    visa.message = "Internal Error Occured!";
                }
            }
            catch (Exception ex)
            {
                error = ex.ToString();
            }
            finally
            {
                if (cmd.Connection.State == System.Data.ConnectionState.Open)
                {
                    cmd.Connection.Close();
                }
            }
            return visa;
        }
        public SalesOrderFormModel FlightAdd(SOFlightDetail val, string usergid)
        {
            SalesOrderFormModel flight = new SalesOrderFormModel();
            try
            {
                cmd = new MySqlCommand("sp_ins_soflight");
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("p_salesorder_gid", val.salesorder_gid);
                cmd.Parameters.AddWithValue("p_flight_number", val.flight_number);
                cmd.Parameters.AddWithValue("p_flight_name", val.flight_name);
                cmd.Parameters.AddWithValue("p_departure_date", val.departure_date);
                cmd.Parameters.AddWithValue("p_flight_time", val.flight_time);
                cmd.Parameters.AddWithValue("p_flight_from", val.flight_from);
                cmd.Parameters.AddWithValue("p_flight_to", val.flight_to);
                cmd.Parameters.AddWithValue("p_currency", val.currency);
                cmd.Parameters.AddWithValue("p_amount", val.amount);
                cmd.Parameters.AddWithValue("p_remarks", val.remarks);
                cmd.Parameters.AddWithValue("p_created_by", usergid);
                cmd.Parameters.AddWithValue("p_reference_gid", 0);
                cmd.Parameters.AddWithValue("p_pnr_number", val.pnr_number);
                cmd.Parameters.AddWithValue("p_ticket_number", val.ticket_number);
                cmd.Parameters.AddWithValue("p_sector_number", val.sector_number);
                cmd.Parameters.AddWithValue("p_flight_class", val.flight_class);
                cmd.Parameters.AddWithValue("p_segment", val.segment);
                cmd.Parameters.AddWithValue("p_flight_airline", "");
                cmd.Parameters.AddWithValue("p_flight_routing", val.flight_routing);
                mnrestult = DBAccess.ExecuteNonQuery(cmd);

                if (mnrestult == 1)
                {
                    foreach (var data in val.SOPassangerList)
                    {
                        MySqlCommand filghtdtl = new MySqlCommand("sp_ins_soflightpassengerdtl");
                        filghtdtl.CommandType = System.Data.CommandType.StoredProcedure;
                        filghtdtl.Parameters.AddWithValue("p_salesorder_gid", val.salesorder_gid);
                        filghtdtl.Parameters.AddWithValue("p_passengerservice_gid", data.passengerservice_gid);
                        filghtdtl.Parameters.AddWithValue("p_passenger_firstname", data.passanger_firstname);
                        filghtdtl.Parameters.AddWithValue("p_passenger_lastname", data.passanger_lastname);
                        filghtdtl.Parameters.AddWithValue("p_passport_number", data.passport_number);
                        filghtdtl.Parameters.AddWithValue("p_created_by", usergid);
                        filghtdtl.Parameters.AddWithValue("p_flightservice_gid", "");
                        mnresult1 = DBAccess.ExecuteNonQuery(filghtdtl);
                        if (mnresult1 == 1)
                        {
                            val.status = true;
                            val.message = "Records added sucessfully";
                        }
                    }
                    flight.status = true;
                    flight.message = "Records added sucessfully";
                }
                else
                {
                    flight.status = false;
                    flight.message = "Internal Error Occured!";
                }

            }
            catch (Exception ex)
            {
                error = ex.ToString();
            }
            finally
            {
                if (cmd.Connection.State == System.Data.ConnectionState.Open)
                {
                    cmd.Connection.Close();
                }
            }
            return flight;
        }
        public SalesOrderFormModel HotelAdd(SOHotelDetail val, string usergid)
        {
            SalesOrderFormModel hotel = new SalesOrderFormModel();
            try
            {
                cmd = new MySqlCommand("sp_ins_sohotel");
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("p_salesorder_gid", val.salesorder_gid);
                cmd.Parameters.AddWithValue("p_hotel_name", val.hotel_name);
                cmd.Parameters.AddWithValue("p_category", val.category);
                cmd.Parameters.AddWithValue("p_city", val.city);
                cmd.Parameters.AddWithValue("p_destination", val.destination);
                cmd.Parameters.AddWithValue("p_check_in", val.check_in);
                cmd.Parameters.AddWithValue("p_check_out", val.check_out);
                cmd.Parameters.AddWithValue("p_total_numberofdays", val.total_numberofdays);
                cmd.Parameters.AddWithValue("p_total_numberofpassengers", val.total_numberofpassengers);
                cmd.Parameters.AddWithValue("p_currency", val.currency);
                cmd.Parameters.AddWithValue("p_amount", val.amount);
                cmd.Parameters.AddWithValue("p_created_by", usergid);
                cmd.Parameters.AddWithValue("p_reference_gid", 0);
                mnrestult = DBAccess.ExecuteNonQuery(cmd);
                if (mnrestult == 1)
                {
                    hotel.status = true;
                }
                else
                {
                    hotel.status = false;
                    hotel.message = "Internal Error Occured!";
                }
            }
            catch (Exception ex)
            {
                error = ex.ToString();
            }
            finally
            {
                if (cmd.Connection.State == System.Data.ConnectionState.Open)
                {
                    cmd.Connection.Close();
                }
            }
            return hotel;
        }
        public SalesOrderFormModel CarAdd(SOCarDetail val, string usergid)
        {
            SalesOrderFormModel car = new SalesOrderFormModel();
            try
            {
                cmd = new MySqlCommand("sp_ins_socar");
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("P_salesorder_gid", val.salesorder_gid);
                cmd.Parameters.AddWithValue("p_car_type", val.car_type);
                cmd.Parameters.AddWithValue("p_from_date", val.from_date);
                cmd.Parameters.AddWithValue("p_to_date", val.to_date);
                cmd.Parameters.AddWithValue("p_pickup_city", val.pickup_city);
                cmd.Parameters.AddWithValue("p_drop_city", val.drop_city);
                cmd.Parameters.AddWithValue("p_numberof_persons", val.numberof_persons);
                cmd.Parameters.AddWithValue("p_remarks", val.remarks);
                cmd.Parameters.AddWithValue("p_currency", val.currency);
                cmd.Parameters.AddWithValue("p_amount", val.amount);
                cmd.Parameters.AddWithValue("p_created_by", usergid);
                cmd.Parameters.AddWithValue("p_reference_gid", 0);
                //cmd.Connection = con;
                mnrestult = DBAccess.ExecuteNonQuery(cmd);
                if (mnrestult == 1)
                {
                    car.status = true;
                }
                else
                {
                    car.status = false;
                    car.message = "Internal Error Occured!";
                }
            }
            catch (Exception ex)
            {
                error = ex.ToString();
            }
            finally
            {
                if (cmd.Connection.State == System.Data.ConnectionState.Open)
                {
                    cmd.Connection.Close();
                }
            }
            return car;
        }
        public SalesOrderFormModel ForexAdd(SOForexDetail val, string usergid)
        {
            SalesOrderFormModel forex = new SalesOrderFormModel();
            try
            {
                cmd = new MySqlCommand("sp_ins_soforex");
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("P_salesorder_gid", val.salesorder_gid);
                cmd.Parameters.AddWithValue("p_customerpaid_amount", val.customerpaid_amount);
                cmd.Parameters.AddWithValue("p_customerreceived_amount", val.customerreceived_amount);
                cmd.Parameters.AddWithValue("p_total_paidamount", val.total_paidamount);
                cmd.Parameters.AddWithValue("p_total_receivedamount", val.total_receivedamount);
                cmd.Parameters.AddWithValue("p_paidamount_exchangerate", val.paidamount_exchangerate);
                cmd.Parameters.AddWithValue("p_receivedamount_exchangerate", val.receivedamount_exchangerate);
                cmd.Parameters.AddWithValue("p_paidamount_currency", val.paidamount_currency);
                cmd.Parameters.AddWithValue("p_receivedamount_currency", val.receivedamount_currency);
                cmd.Parameters.AddWithValue("p_remarks", val.remarks);
                cmd.Parameters.AddWithValue("p_created_by", usergid);
                cmd.Parameters.AddWithValue("p_reference_gid", 0);
                mnrestult = DBAccess.ExecuteNonQuery(cmd);
                if (mnrestult == 1)
                {
                    forex.status = true;
                }
                else
                {
                    forex.status = false;
                    forex.message = "Internal Error Occured!";
                }
            }
            catch (Exception ex)
            {
                error = ex.ToString();
            }
            finally
            {
                if (cmd.Connection.State == System.Data.ConnectionState.Open)
                {
                    cmd.Connection.Close();
                }
            }
            return forex;
        }
        public SalesOrderFormModel InsuranceAdd(SOInsurenceDetail val, string usergid)
        {
            SalesOrderFormModel insurance = new SalesOrderFormModel();
            try
            {
                cmd = new MySqlCommand("sp_ins_soinsurance");
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("p_salesorder_gid", val.salesorder_gid);
                cmd.Parameters.AddWithValue("p_name", val.name);
                cmd.Parameters.AddWithValue("p_dob", val.dob);
                cmd.Parameters.AddWithValue("p_arrival_port", val.arrival_port);
                cmd.Parameters.AddWithValue("p_start_date", val.start_date);
                cmd.Parameters.AddWithValue("p_end_date", val.end_date);
                cmd.Parameters.AddWithValue("p_currency", val.currency);
                cmd.Parameters.AddWithValue("p_amount", val.amount);
                cmd.Parameters.AddWithValue("p_remarks", val.remarks);
                cmd.Parameters.AddWithValue("p_created_by", usergid);
                cmd.Parameters.AddWithValue("p_reference_gid", 0);
                cmd.Parameters.AddWithValue("p_passenger_name", "");
                //cmd.Connection = con;
                mnrestult = DBAccess.ExecuteNonQuery(cmd);
                if (mnrestult == 1)
                {
                    insurance.status = true;
                }
                else
                {
                    insurance.status = false;
                    insurance.message = "Internal Error Occured!";
                }
            }
            catch (Exception ex)
            {
                error = ex.ToString();
            }
            finally
            {
                if (cmd.Connection.State == System.Data.ConnectionState.Open)
                {
                    cmd.Connection.Close();
                }
            }
            return insurance;
        }
        public SalesOrderFormModel overallsubmit(SalesOrderFormList val, string usergid)
        {

            SalesOrderFormModel sub = new SalesOrderFormModel();
            try
            {
                cmd = new MySqlCommand("sp_ins_salesorder");
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("p_salesorder_gid", val.salesorder_gid);
                cmd.Parameters.AddWithValue("P_customer_name", "");
                cmd.Parameters.AddWithValue("p_mobile_no", "");
                cmd.Parameters.AddWithValue("P_national_id", "");
                cmd.Parameters.AddWithValue("P_email_address", "");
                cmd.Parameters.AddWithValue("p_customer_gid", val.customer_gid);
                cmd.Parameters.AddWithValue("p_total", val.total);
                cmd.Parameters.AddWithValue("p_net_amount", val.net_amount);
                cmd.Parameters.AddWithValue("p_discount_value", val.discount);
                cmd.Parameters.AddWithValue("p_advance_paid", val.advace_paid);
                cmd.Parameters.AddWithValue("p_created_by", usergid);
                cmd.Parameters.AddWithValue("p_currency_gid", val.currency_gid);
                cmd.Parameters.AddWithValue("p_branch_gid", "");
                cmd.Parameters.AddWithValue("p_branch_name", "");
                mnrestult = DBAccess.ExecuteNonQuery(cmd);

                if (mnrestult == 1)
                {
                    sub.status = true;
                    sub.message = "Sales Order Added Sucessfully";
                }
                else
                {
                    sub.status = false;
                    sub.message = "Error Occurred While Adding Sales Order";
                }
            }
            catch (Exception ex)
            {
                sub.status = false;
                sub.message = "Internal Error Occured!";
                error = ex.ToString();
            }
            finally
            {
                if (cmd.Connection.State == System.Data.ConnectionState.Open)
                {
                    cmd.Connection.Close();
                }
            }
            return sub;
        }
        public SalesOrderFormModel soeditsubmit(SalesOrderFormList val, string usergid)
        {

            SalesOrderFormModel sub = new SalesOrderFormModel();
            try
            {
                cmd = new MySqlCommand("sp_upt_salesorder");
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("p_salesorder_gid", val.salesorder_gid);               
                cmd.Parameters.AddWithValue("p_total", val.total);
                cmd.Parameters.AddWithValue("p_updated_by", usergid);
                cmd.Parameters.AddWithValue("p_branch_gid", "");
                cmd.Parameters.AddWithValue("p_branch_name", "");
                mnrestult = DBAccess.ExecuteNonQuery(cmd);

                if (mnrestult == 1)
                {
                    sub.status = true;
                    sub.message = "Sales Order Added Sucessfully";
                }
                else
                {
                    sub.status = false;
                    sub.message = "Error Occurred While Adding Sales Order";
                }
            }
            catch (Exception ex)
            {
                sub.status = false;
                sub.message = "Internal Error Occured!";
                error = ex.ToString();
            }
            finally
            {
                if (cmd.Connection.State == System.Data.ConnectionState.Open)
                {
                    cmd.Connection.Close();
                }
            }
            return sub;
        }
        public SalesOrderForm Alltmpdelete(int salesorder_gid)
        {
            SalesOrderForm Alltmpdelete = new SalesOrderForm();
            try
            {
                cmd = new MySqlCommand("sp_del_allsotemptables");
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("p_salesorder_gid", salesorder_gid);
                mnrestult = DBAccess.ExecuteNonQuery(cmd);
                if (mnrestult == 1)
                {
                    Alltmpdelete.status = true;
                    Alltmpdelete.message = "All Temp Tables Deleted Successfully";

                }
            }
            catch (Exception ex)
            {
                error = ex.ToString();
            }
            finally
            {
                if (cmd.Connection.State == System.Data.ConnectionState.Open)
                {
                    cmd.Connection.Close();
                }
            }
            return Alltmpdelete;
        }

        public SalesOrderFormModel sopackageadd(SOPackageDetail val, string usergid)
        {
            SalesOrderFormModel insurance = new SalesOrderFormModel();
            try
            {
                cmd = new MySqlCommand("sp_ins_sopackage");
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("p_salesorder_gid", val.salesorder_gid);
                cmd.Parameters.AddWithValue("p_remarks", val.remarks);
                cmd.Parameters.AddWithValue("p_upload_documents", "0");
                cmd.Parameters.AddWithValue("p_created_by", usergid);
                cmd.Parameters.AddWithValue("p_amount", val.amount);
                cmd.Parameters.AddWithValue("p_reference_gid", 0);
                mnrestult = DBAccess.ExecuteNonQuery(cmd);
                if (mnrestult == 1)
                {
                    insurance.status = true;
                }
                else
                {
                    insurance.status = false;
                    insurance.message = "Internal Error Occured!";
                }
            }
            catch (Exception ex)
            {
                error = ex.ToString();
            }
            finally
            {
                if (cmd.Connection.State == System.Data.ConnectionState.Open)
                {
                    cmd.Connection.Close();
                }
            }
            return insurance;
        }
        //public SalesOrderFormModel PackageAdd(string companycode, HttpRequest httpRequest, string usergid)
        //{
        //    SOPackageDetail package = new SOPackageDetail();            
        //    HttpPostedFile httpPostedFile;
        //    HttpFileCollection httpFileCollection;
        //    try
        //    {
        //        if (httpRequest.Files.Count > 0)
        //        {
        //            httpFileCollection = httpRequest.Files;

        //            for (int i = 0; i < httpFileCollection.Count; i++)
        //            {
        //                httpPostedFile = httpFileCollection[i];
        //                string FileExtension = httpPostedFile.FileName;
        //                FileExtension = Path.GetExtension(FileExtension).ToLower();
        //                package.packageuploaddocs = HttpContext.Current.Server.MapPath("../../" + companycode+ConfigurationManager.AppSettings["package_file_path"].ToString() + httpPostedFile.FileName);
        //                httpPostedFile.SaveAs(package.packageuploaddocs);
        //            }
        //            if (File.Exists(package.packageuploaddocs))
        //            {
        //                cmd = new MySqlCommand("sp_ins_sopackage");
        //                cmd.CommandType = System.Data.CommandType.StoredProcedure;
        //                cmd.Parameters.AddWithValue("p_salesorder_gid", httpRequest.Form["salesorder_gid"]);
        //                cmd.Parameters.AddWithValue("p_remarks", httpRequest.Form["packageremarks"]);
        //                cmd.Parameters.AddWithValue("p_upload_documents", package.packageuploaddocs);
        //                cmd.Parameters.AddWithValue("p_created_by",usergid);
        //                cmd.Parameters.AddWithValue("p_amount", httpRequest.Form["packageamount"]);
        //                cmd.Parameters.AddWithValue("p_reference_gid", 0);
        //                mnrestult = DBAccess.ExecuteNonQuery(cmd);

        //                if (mnrestult == 1)
        //                {
        //                    package.status = true;
        //                    package.message = "File Uploaded Successfully!";
        //                }
        //                else
        //                {
        //                    package.status = false;
        //                    package.message = "Error Occured While Uploading file!";
        //                }                       
        //            }
        //            else
        //            {
        //                package.status = false;
        //                package.message = "Error Occured While uploading file!";
        //            }
        //        }
        //        else
        //        {
        //            package.status = false;
        //            package.message = "File Not Available!";
        //        }
        //    }

        //    catch (Exception ex)
        //    { }
        //    finally
        //    {
        //        if (cmd.Connection.State == System.Data.ConnectionState.Open)
        //        {
        //            cmd.Connection.Close();
        //        }
        //    }
        //    return package;
        //}
        public SalesOrderFormModel PassportUploadDocument(SOPassportDetail val, string usergid)
        {
            SalesOrderFormModel insurance = new SalesOrderFormModel();
            try
            {
                cmd = new MySqlCommand("sp_ins_sopassport");
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("p_salesorder_gid", val.salesorder_gid);
                cmd.Parameters.AddWithValue("p_passenger_name", val.passenger_name);
                cmd.Parameters.AddWithValue("p_id_proof", val.id_proof);
                cmd.Parameters.AddWithValue("p_additional_proof", val.additional_proof);
                cmd.Parameters.AddWithValue("p_photo", val.photo);
                cmd.Parameters.AddWithValue("p_upload_documents", "0");
                cmd.Parameters.AddWithValue("p_anygovt_document", val.anygovt_document);
                cmd.Parameters.AddWithValue("p_amount", val.amount);
                cmd.Parameters.AddWithValue("p_tmppassengerservice_gid", val.tmppassengerservice_gid);
                cmd.Parameters.AddWithValue("p_created_by", usergid);
                cmd.Parameters.AddWithValue("p_reference_gid", 0);
                //cmd.Connection = con;
                mnrestult = DBAccess.ExecuteNonQuery(cmd);
                if (mnrestult == 1)
                {
                    insurance.status = true;
                }
                else
                {
                    insurance.status = false;
                    insurance.message = "Internal Error Occured!";
                }
            }
            catch (Exception ex)
            {
                error = ex.ToString();
            }
            finally
            {
                if (cmd.Connection.State == System.Data.ConnectionState.Open)
                {
                    cmd.Connection.Close();
                }
            }
            return insurance;
        }
        //public SalesOrderFormModel GetpassdocumentUploadExcel(string companycode, HttpRequest httpRequest, string usergid)
        //{
        //    SOPassportDetail GetpassdocumentImportExcel = new SOPassportDetail();
        //    HttpPostedFile httpPostedFile;
        //    HttpFileCollection httpFileCollection;
        //    try
        //    {
        //        //if (httpRequest.Files.Count > 0)
        //        //{
        //            httpFileCollection = httpRequest.Files;

        //            for (int i = 0; i < httpFileCollection.Count; i++)
        //            {
        //                httpPostedFile = httpFileCollection[i];
        //                string FileExtension = httpPostedFile.FileName;
        //                FileExtension = Path.GetExtension(FileExtension).ToLower();
        //                GetpassdocumentImportExcel.uploaddocument = HttpContext.Current.Server.MapPath("../../" + companycode+ConfigurationManager.AppSettings["Passport_file_path"].ToString() + httpPostedFile.FileName);
        //                httpPostedFile.SaveAs(GetpassdocumentImportExcel.uploaddocument);
        //            }
        //            if (File.Exists(GetpassdocumentImportExcel.uploaddocument))
        //            {

        //                cmd = new MySqlCommand("sp_ins_sopassport");
        //                cmd.CommandType = System.Data.CommandType.StoredProcedure;
        //                cmd.Parameters.AddWithValue("p_salesorder_gid", httpRequest.Form["salesorder_gid"]);
        //                cmd.Parameters.AddWithValue("p_passenger_name", httpRequest.Form["passportpassangername"]);
        //                cmd.Parameters.AddWithValue("p_id_proof", httpRequest.Form["passportidproof"]);
        //                cmd.Parameters.AddWithValue("p_additional_proof", httpRequest.Form["passportadditionalproof"]);
        //                cmd.Parameters.AddWithValue("p_photo", httpRequest.Form["photocount"]);
        //                cmd.Parameters.AddWithValue("p_upload_documents", GetpassdocumentImportExcel.uploaddocument);
        //                cmd.Parameters.AddWithValue("p_anygovt_document", httpRequest.Form["passportgovtdocument"]);
        //                cmd.Parameters.AddWithValue("p_amount", httpRequest.Form["passportamount"]);
        //                cmd.Parameters.AddWithValue("p_tmppassengerservice_gid", httpRequest.Form["passanger_gid"]);
        //                cmd.Parameters.AddWithValue("p_created_by", usergid);
        //                cmd.Parameters.AddWithValue("p_reference_gid", 0);
        //                //cmd.Connection = con;
        //                mnrestult = DBAccess.ExecuteNonQuery(cmd);

        //                if (mnrestult == 1)
        //                {
        //                    GetpassdocumentImportExcel.status = true;
        //                    GetpassdocumentImportExcel.message = "File Uploaded Successfully!";
        //                }
        //                else
        //                {
        //                    GetpassdocumentImportExcel.status = false;
        //                    GetpassdocumentImportExcel.message = "Error Occured While Uploading file!";
        //                }                       
        //            }
        //            else
        //            {
        //                GetpassdocumentImportExcel.status = false;
        //                GetpassdocumentImportExcel.message = "File Not Detected!";
        //            }
        //        //}
        //        //else
        //        //{
        //        //    GetpassdocumentImportExcel.status = false;
        //        //    GetpassdocumentImportExcel.message = "Error Occured While uploading file!";
        //        //}
        //    }
        //    catch(Exception ex)
        //    {
        //    }
        //    finally
        //    {
        //        if (cmd.Connection.State == System.Data.ConnectionState.Open)
        //        {
        //            cmd.Connection.Close();
        //        }
        //    }
        //    return GetpassdocumentImportExcel;
        //}
        public SalesOrderForm getpassportno(int val)
        {
            SalesOrderForm SOF = new SalesOrderForm();
            try
            {
                cmd = new MySqlCommand("sp_sel_flightpassportno");
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                //cmd.Connection = con;
                cmd.Parameters.AddWithValue("p_salesorder_gid", val);
                rd = DBAccess.ExecuteReader(cmd);
                var summary = new List<SOPassangerList>();
                if (rd.HasRows == true)
                {
                    while (rd.Read())
                    {
                        summary.Add(new SOPassangerList
                        {
                            name = rd["name"].ToString(),
                            passport_number = rd["passport_number"].ToString(),
                            tmppassengerservice_gid = rd["tmppassengerservice_gid"].ToString()
                        });
                    }
                    
                    SOF.SOPassangerList = summary;
                    SOF.status = true;
                    SOF.message = "Records successfully selected!";
                }
                else
                {
                    SOF.status = false;
                    SOF.message = "No records found!";
                }
                rd.Close();
            }

            catch (Exception ex)
            {
                SOF.status = false;
                SOF.message = "Internal Error Occured!";
                error = ex.ToString();
            }
            finally
            {
                if (cmd.Connection.State == System.Data.ConnectionState.Open)
                {
                    cmd.Connection.Close();
                }
            }
            return SOF;
        }



        public SOPassengerDetail getpassenger(string val)
        {
            SOPassengerDetail SOF = new SOPassengerDetail();
            try
            {
                cmd = new MySqlCommand("sp_sel_getpassenger");
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("p_tmppassengerservice_gid", val);
                rd = DBAccess.ExecuteReader(cmd);
                if (rd.HasRows == true)
                {
                    rd.Read();
                    SOF.passanger_firstname = rd["passenger_firstname"].ToString();
                    SOF.passanger_lastname = rd["passenger_lastname"].ToString();
                    SOF.gender = rd["gender"].ToString();
                    SOF.dob = rd["dob"].ToString();
                    SOF.passport_number = rd["passport_number"].ToString();
                    SOF.passport_issueddate = rd["passport_issueddate"].ToString();
                    SOF.passport_expirydate = rd["passport_expirydate"].ToString();
                    SOF.status = true;
                    
                }
                else
                {
                    SOF.status = false;
                    SOF.message = "No records found!";
                }
                rd.Close();
            }

            catch (Exception ex)
            {
                SOF.status = false;
                SOF.message = "Internal Error Occured!";
                error = ex.ToString();
            }
            finally
            {
                if (cmd.Connection.State == System.Data.ConnectionState.Open)
                {
                    cmd.Connection.Close();
                }
            }
            return SOF;
        }
        public SalesOrderFormModel salesorderformpasdel(SOPassengerDetail values)
        {
            SalesOrderFormModel delete = new SalesOrderFormModel();
            try
            {
                cmd = new MySqlCommand("sp_del_salesorderformpasdel");
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("p_tmppassengerservice_gid", values.tmppassengerservice_gid);
                mnrestult = DBAccess.ExecuteNonQuery(cmd);
                if (mnrestult == 1)
                {
                    delete.status = true;
                }
                else
                {
                    delete.status = false;
                }
            }
            catch (Exception ex)
            {
                delete.status = false;
                error = ex.ToString();
            }
            finally
            {
                if (cmd.Connection.State == System.Data.ConnectionState.Open)
                {
                    cmd.Connection.Close();
                }
            }

            return delete;
        }
        public SalesOrderFormModel salesorderformcustomerinvoicedel(SOPassengerDetail values)
        {
            SalesOrderFormModel delete = new SalesOrderFormModel();
            try
            {
                cmd = new MySqlCommand("sp_del_salesorderformcustomerinvoicedel");
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("p_tmpsalesactivity_gid", values.salesactivity_gid);
                cmd.Parameters.AddWithValue("p_service_type", "");
                cmd.Parameters.AddWithValue("p_reference_gid", "0");
                mnrestult = DBAccess.ExecuteNonQuery(cmd);
                if (mnrestult == 1)
                {
                    delete.status = true;
                }
                else
                {
                    delete.status = false;
                }
            }
            catch (Exception ex)
            {
                delete.status = false;
                error = ex.ToString();
            }
            finally
            {
                if (cmd.Connection.State == System.Data.ConnectionState.Open)
                {
                    cmd.Connection.Close();
                }
            }

            return delete;
        }
        public SalesOrderFormModel salesorderformcancel(int salesorder_gid)
        {
            SalesOrderFormModel cancel = new SalesOrderFormModel();
            try
            {
                cmd = new MySqlCommand("sp_upt_salesorderformcancel");
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("p_salesorder_gid", salesorder_gid);
                mnrestult = DBAccess.ExecuteNonQuery(cmd);
                if (mnrestult == 1)
                {
                    cancel.status = true;
                }
                else
                {
                    cancel.status = false;
                }
            }
            catch (Exception ex)
            {
                cancel.status = false;
                error = ex.ToString();
            }
            finally
            {
                if (cmd.Connection.State == System.Data.ConnectionState.Open)
                {
                    cmd.Connection.Close();
                }
            }

            return cancel;
        }

        public SalesOrderForm soserviceget(int salesorder_gid, int serviceid)
        {
            SalesOrderForm sof = new SalesOrderForm();

            try
            {
                if (serviceid == 1)
                {
                    cmd = new MySqlCommand("sp_sel_sopassport");
                    cmd.Parameters.AddWithValue("p_salesorder_gid", salesorder_gid);
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    rd = DBAccess.ExecuteReader(cmd);
                    var passportsummary = new List<SOPassportList>();
                    if (rd.HasRows == true)
                    {
                        while (rd.Read())
                        {
                            passportsummary.Add(new SOPassportList
                            {
                                passportservice_gid = rd["passportservice_gid"].ToString(),
                                passenger_name = rd["passenger_name"].ToString(),
                                id_proof = rd["id_proof"].ToString(),
                                amount = double.Parse(rd["amount"].ToString())

                            });
                        }
                        
                        cmd.Connection.Close();
                        sof.SOPassportList = passportsummary;
                        sof.status = true;
                    }
                    else
                    {
                        cmd.Connection.Close();
                    }
                    rd.Close();
                }

                else if (serviceid == 2)
                {
                    cmd = new MySqlCommand("sp_sel_sovisa");
                    cmd.Parameters.AddWithValue("P_salesorder_gid", salesorder_gid);
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    rd = DBAccess.ExecuteReader(cmd);
                    var visasummary = new List<SOVisaList>();
                    if (rd.HasRows == true)
                    {
                        while (rd.Read())
                        {
                            visasummary.Add(new SOVisaList
                            {
                                visaservice_gid = rd["visaservice_gid"].ToString(),
                                passenger_name = rd["passenger_name"].ToString(),
                                country = rd["country"].ToString(),
                                application_date = rd["application_date"].ToString(),
                                expiry_date = rd["expiry_date"].ToString(),
                                visa_period = rd["visa_period"].ToString(),
                                amount = double.Parse(rd["amount"].ToString())

                            });
                        }
                       
                        cmd.Connection.Close();
                        sof.SOVisaList = visasummary;
                        sof.status = true;
                    }

                    else
                    {
                        cmd.Connection.Close();
                    }
                    rd.Close();
                }

                else if (serviceid == 3)
                {
                    cmd = new MySqlCommand("sp_sel_soflight");
                    cmd.Parameters.AddWithValue("P_salesorder_gid", salesorder_gid);
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    rd = DBAccess.ExecuteReader(cmd);
                    var flightsummary = new List<SOFlightList>();
                    if (rd.HasRows == true)
                    {
                        while (rd.Read())
                        {
                            flightsummary.Add(new SOFlightList
                            {
                                flightservice_gid = rd["flightservice_gid"].ToString(),
                                flight_number = rd["flight_number"].ToString(),
                                flight_name = rd["flight_name"].ToString(),
                                passenger_details = rd["passenger_name"].ToString(),
                                flight_departuredate = rd["flight_departuredate"].ToString(),
                                flight_time = rd["flight_time"].ToString(),
                                flight_from = rd["flight_from"].ToString(),
                                flight_to = rd["flight_to"].ToString(),
                                amount = double.Parse(rd["amount"].ToString()),
                                pnr_number  = rd["pnr_number"].ToString(),
                                sector_number  = rd["sector_number"].ToString(),
                                ticket_number = rd["ticket_number"].ToString(),
                                flight_class = rd["flightclass"].ToString(),
                                flight_routing = rd["flightrouting"].ToString(),
                                
                                segment = rd["segment"].ToString()
                            });
                        }

                        
                        cmd.Connection.Close();
                        sof.SOFlightList = flightsummary;
                        sof.status = true;
                    }

                    else
                    {
                        cmd.Connection.Close();
                    }
                    rd.Close();
                }

                else if (serviceid == 4)
                {
                    cmd = new MySqlCommand("sp_sel_sohotel");
                    cmd.Parameters.AddWithValue("P_salesorder_gid", salesorder_gid);
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    rd = DBAccess.ExecuteReader(cmd);
                    var hotelsummary = new List<SOHotelList>();
                    if (rd.HasRows == true)
                    {
                        while (rd.Read())
                        {
                            hotelsummary.Add(new SOHotelList
                            {
                                hotelservice_gid = rd["hotelservice_gid"].ToString(),
                                hotel_name = rd["hotel_name"].ToString(),
                                category = rd["category"].ToString(),
                                city = rd["city"].ToString(),
                                check_in = rd["check_in"].ToString(),
                                check_out = rd["check_out"].ToString(),
                                total_numberofdays = int.Parse(rd["total_numberofdays"].ToString()),
                                total_numberofpassengers = int.Parse(rd["total_numberofpassengers"].ToString()),
                                amount = double.Parse(rd["amount"].ToString())

                            });
                        }
                        
                        cmd.Connection.Close();
                        sof.SOHotelList = hotelsummary;
                        sof.status = true;
                    }

                    else
                    {
                        cmd.Connection.Close();
                    }
                    rd.Close();
                }

                else if (serviceid == 5)
                {
                    cmd = new MySqlCommand("sp_sel_socar");
                    cmd.Parameters.AddWithValue("P_salesorder_gid", salesorder_gid);
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    rd = DBAccess.ExecuteReader(cmd);
                    var carsummary = new List<SOCarList>();
                    if (rd.HasRows == true)
                    {
                        while (rd.Read())
                        {
                            carsummary.Add(new SOCarList
                            {
                                carservice_gid = rd["carservice_gid"].ToString(),
                                car_type = rd["car_type"].ToString(),
                                from_date = rd["from_date"].ToString(),
                                to_date = rd["to_date"].ToString(),
                                pickup_city = rd["pickup_city"].ToString(),
                                drop_city = rd["drop_city"].ToString(),
                                numberof_persons = int.Parse(rd["numberof_persons"].ToString()),
                                amount = float.Parse(rd["amount"].ToString())

                            });
                        }
                        
                        cmd.Connection.Close();
                        sof.SOCarList = carsummary;
                        sof.status = true;
                    }

                    else
                    {
                        cmd.Connection.Close();
                    }
                    rd.Close();
                }

                else if (serviceid == 6)
                {
                    cmd = new MySqlCommand("sp_sel_soforex");
                    cmd.Parameters.AddWithValue("P_salesorder_gid", salesorder_gid);
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    rd = DBAccess.ExecuteReader(cmd);
                    var forexsummary = new List<SOForexList>();
                    if (rd.HasRows == true)
                    {
                        while (rd.Read())
                        {
                            forexsummary.Add(new SOForexList
                            {
                                forexgid = rd["forexservice_gid"].ToString(),
                                paidcurrency = rd["paidamount_currency"].ToString(),
                                customerpaidamount = double.Parse(rd["customerpaid_amount"].ToString()),
                                customerpaidtotalamount = double.Parse(rd["total_paidamount"].ToString()),
                                receivedcurrency = rd["receivedamount_currency"].ToString(),
                                customerreceivedamount = double.Parse(rd["customerreceived_amount"].ToString()),
                                customerreceivedtotalamount = int.Parse(rd["total_receivedamount"].ToString())

                            });
                        }
                        
                        cmd.Connection.Close();
                        sof.SOForexList = forexsummary;
                        sof.status = true;
                    }

                    else
                    {
                        cmd.Connection.Close();
                    }
                    rd.Close();
                }

                else if (serviceid == 7)
                {
                    cmd = new MySqlCommand("sp_sel_sopackage");
                    cmd.Parameters.AddWithValue("P_salesorder_gid", salesorder_gid);
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    rd = DBAccess.ExecuteReader(cmd);
                    var packagesummary = new List<SOPackageDetailList>();
                    if (rd.HasRows == true)
                    {
                        while (rd.Read())
                        {
                            packagesummary.Add(new SOPackageDetailList
                            {
                                packageservice_gid = rd["packageservice_gid"].ToString(),
                                amount = double.Parse(rd["amount"].ToString()),
                                remarks = rd["remarks"].ToString()

                            });
                        }
                        
                        cmd.Connection.Close();
                        sof.SOPackageDetailList = packagesummary;
                        sof.status = true;
                    }
                    else
                    {
                        cmd.Connection.Close();
                    }
                    rd.Close();
                }

                else if (serviceid == 8)
                {
                    cmd = new MySqlCommand("sp_sel_soinsurance");
                    cmd.Parameters.AddWithValue("P_salesorder_gid", salesorder_gid);
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    rd = DBAccess.ExecuteReader(cmd);
                    var insurancesummary = new List<SOInsurenceList>();
                    if (rd.HasRows == true)
                    {
                        while (rd.Read())
                        {
                            insurancesummary.Add(new SOInsurenceList
                            {
                                insuranceservice_gid = rd["insuranceservice_gid"].ToString(),
                                name = rd["name"].ToString(),
                                dob = rd["dob"].ToString(),
                                arrival_port = rd["arrival_port"].ToString(),
                                start_date = rd["start_date"].ToString(),
                                end_date = rd["end_date"].ToString(),
                                amount = double.Parse(rd["amount"].ToString())
                            });
                        }
                        
                        cmd.Connection.Close();
                        sof.SOInsurenceList = insurancesummary;
                        sof.status = true;
                    }
                    else
                    {
                        cmd.Connection.Close();
                    }
                    rd.Close();
                }

            }

            catch (Exception ex)
            {
                sof.status = false;
                sof.message = "Customer Details Not Loaded";
                error = ex.ToString();
            }
            finally
            {
                if (cmd.Connection.State == System.Data.ConnectionState.Open)
                {
                    cmd.Connection.Close();
                }

            }
            return sof;
        }

        public soservicedelete sofpassengerdelete(string values)
        {
            soservicedelete sof = new soservicedelete();

            try
            {
                cmd = new MySqlCommand("sp_del_sofpassenger");
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("p_passengerservice_gid", values);
                mnrestult = DBAccess.ExecuteNonQuery(cmd);
                if (mnrestult == 1)
                {
                    sof.status = true;
                    sof.message = "Passenger Deleted Successfully";
                }
                else
                {
                    sof.status = false;
                    sof.message = " Error Occured while delete passenger Information!";
                }
            }
            catch (Exception ex)
            {
                sof.status = false;
                sof.message = " Error Occured while delete passenger Information!";
                error = ex.ToString();
            }
            finally
            {
                if (cmd.Connection.State == System.Data.ConnectionState.Open)
                {
                    cmd.Connection.Close();
                }
            }

            return sof;
        }

        public soservicedelete sofpassportdelete(string values)
        {
            soservicedelete sof = new soservicedelete();

            try
            {
                cmd = new MySqlCommand("sp_del_sofpassport");
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("p_passportgid", values);
                mnrestult = DBAccess.ExecuteNonQuery(cmd);
                if (mnrestult == 1)
                {
                    sof.status = true;
                    sof.message = "Passport Deleted Successfully";
                }
                else
                {
                    sof.status = false;
                    sof.message = " Error Occured while delete Passport Information!";
                }
            }
            catch (Exception ex)
            {
                sof.status = false;
                sof.message = " Error Occured while delete Passport Information!";
                error = ex.ToString();
            }
            finally
            {
                if (cmd.Connection.State == System.Data.ConnectionState.Open)
                {
                    cmd.Connection.Close();
                }
            }

            return sof;
        }

        public soservicedelete sofvisadelete(string values)
        {
            soservicedelete sof = new soservicedelete();

            try
            {
                cmd = new MySqlCommand("sp_del_sofvisa");
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("p_visaservicegid", values);
                mnrestult = DBAccess.ExecuteNonQuery(cmd);
                if (mnrestult == 1)
                {
                    sof.status = true;
                    sof.message = "Visa Deleted Successfully";
                }
                else
                {
                    sof.status = false;
                    sof.message = " Error Occured while delete Visa Information!";
                }
            }
            catch (Exception ex)
            {
                sof.status = false;
                sof.message = " Error Occured while delete Visa Information!";
                error = ex.ToString();
            }
            finally
            {
                if (cmd.Connection.State == System.Data.ConnectionState.Open)
                {
                    cmd.Connection.Close();
                }
            }

            return sof;
        }

        public soservicedelete sofflightdelete(string values)
        {
            soservicedelete sof = new soservicedelete();

            try
            {
                cmd = new MySqlCommand("sp_del_sofflight");
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("p_flightservicegid", values);
                mnrestult = DBAccess.ExecuteNonQuery(cmd);
                if (mnrestult == 1)
                {
                    sof.status = true;
                    sof.message = "Flight Tickets Deleted Successfully";
                }
                else
                {
                    sof.status = false;
                    sof.message = " Error Occured while delete Flight Tickets !";
                }
            }
            catch (Exception ex)
            {
                sof.status = false;
                sof.message = " Error Occured while delete Flight Tickets !";
                error = ex.ToString();
            }
            finally
            {
                if (cmd.Connection.State == System.Data.ConnectionState.Open)
                {
                    cmd.Connection.Close();
                }
            }

            return sof;
        }

        public soservicedelete sofhoteldelete(string values)
        {
            soservicedelete sof = new soservicedelete();

            try
            {
                cmd = new MySqlCommand("sp_del_sofhotel");
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("p_hotelservicegid", values);
                mnrestult = DBAccess.ExecuteNonQuery(cmd);
                if (mnrestult == 1)
                {
                    sof.status = true;
                    sof.message = "Hotel Booking Deleted Successfully";
                }
                else
                {
                    sof.status = false;
                    sof.message = " Error Occured while delete Hotel Booking !";
                }
            }
            catch (Exception ex)
            {
                sof.status = false;
                sof.message = " Error Occured while delete Hotel Booking !";
                error = ex.ToString();
            }
            finally
            {
                if (cmd.Connection.State == System.Data.ConnectionState.Open)
                {
                    cmd.Connection.Close();
                }
            }

            return sof;
        }

        public soservicedelete sofcardelete(string values)
        {
            soservicedelete sof = new soservicedelete();

            try
            {
                cmd = new MySqlCommand("sp_del_sofcar");
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("p_carservicegid", values);
                mnrestult = DBAccess.ExecuteNonQuery(cmd);
                if (mnrestult == 1)
                {
                    sof.status = true;
                    sof.message = "Car Booking Deleted Successfully";
                }
                else
                {
                    sof.status = false;
                    sof.message = " Error Occured while delete Car Booking !";
                }
            }
            catch (Exception ex)
            {
                sof.status = false;
                sof.message = " Error Occured while delete Car Booking !";
                error = ex.ToString();
            }
            finally
            {
                if (cmd.Connection.State == System.Data.ConnectionState.Open)
                {
                    cmd.Connection.Close();
                }
            }

            return sof;
        }

        public soservicedelete sofforexdelete(string values)
        {
            soservicedelete sof = new soservicedelete();

            try
            {
                cmd = new MySqlCommand("sp_del_sofforex");
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("p_forexservicegid", values);
                mnrestult = DBAccess.ExecuteNonQuery(cmd);
                if (mnrestult == 1)
                {
                    sof.status = true;
                    sof.message = "Forex Deleted Successfully";
                }
                else
                {
                    sof.status = false;
                    sof.message = " Error Occured while delete Forex!";
                }
            }
            catch (Exception ex)
            {
                sof.status = false;
                sof.message = " Error Occured while delete Forex!";
                error = ex.ToString();
            }
            finally
            {
                if (cmd.Connection.State == System.Data.ConnectionState.Open)
                {
                    cmd.Connection.Close();
                }
            }

            return sof;
        }

        public soservicedelete sofpackagedelete(string values)
        {
            soservicedelete sof = new soservicedelete();

            try
            {
                cmd = new MySqlCommand("sp_del_sofpackage");
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("p_packageservicegid", values);
                mnrestult = DBAccess.ExecuteNonQuery(cmd);
                if (mnrestult == 1)
                {
                    sof.status = true;
                    sof.message = "Package Deleted Successfully";
                }
                else
                {
                    sof.status = false;
                    sof.message = " Error Occured while delete Package!";
                }
            }
            catch (Exception ex)
            {
                sof.status = false;
                sof.message = " Error Occured while delete Package!";
                error = ex.ToString();
            }
            finally
            {
                if (cmd.Connection.State == System.Data.ConnectionState.Open)
                {
                    cmd.Connection.Close();
                }
            }

            return sof;
        }

        public soservicedelete sofinsdelete(string values)
        {
            soservicedelete sof = new soservicedelete();

            try
            {
                cmd = new MySqlCommand("sp_del_sofinsurence");
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("p_insuranceservicegid", values);
                mnrestult = DBAccess.ExecuteNonQuery(cmd);
                if (mnrestult == 1)
                {
                    sof.status = true;
                    sof.message = "Insurance Deleted Successfully";
                }
                else
                {
                    sof.status = false;
                    sof.message = " Error Occured while delete insurance!";
                }
            }
            catch (Exception ex)
            {
                sof.status = false;
                sof.message = " Error Occured while delete insurance!";
                error = ex.ToString();
            }
            finally
            {
                if (cmd.Connection.State == System.Data.ConnectionState.Open)
                {
                    cmd.Connection.Close();
                }
            }

            return sof;
        }

        public SOPassengerDetail sopassengeredit(string val, string usergid)
        {
            SOPassengerDetail pass = new SOPassengerDetail();
            try
            {

                cmd = new MySqlCommand("sp_sel_sopassengeredit");
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("p_passengerservice_gid", val);
                rd = DBAccess.ExecuteReader(cmd);
                if (rd.Read())
                {

                    pass.passengerservice_gid = rd["passengerservice_gid"].ToString();
                    pass.passanger_firstname = rd["passanger_firstname"].ToString();
                    pass.passanger_lastname = rd["passanger_lastname"].ToString();
                    pass.gender = rd["gender"].ToString();
                    pass.dob = rd["dateof_birth"].ToString();

                    pass.passport_number= rd["passport_number"].ToString();
                    pass.passport_expirydate = rd["passport_expirydate"].ToString();
                    pass.passport_issueddate = rd["passport_issueddate"].ToString();
                    pass.salesorder_gid = int.Parse(rd["salesorder_gid"].ToString());
                    //pass.salesactivitygid = int.Parse(rd[""].ToString());
                    pass.status = true;
                    
                }
                else
                {
                    pass.status = false;
                    pass.message = "Internal Error Occured";
                }
                rd.Close();

            }
            catch (Exception ex)
            {
                pass.status = false;
                pass.message = "Internal Error Occured";
                error = ex.ToString();
            }
            finally
            {
                if (cmd.Connection.State == System.Data.ConnectionState.Open)
                {
                    cmd.Connection.Close();
                }

            }
            return pass;
        }
        public SalesOrderFormModel sovisaedit(SOVisaDetail val, string usergid)
        {
            // SalesOrderFormModel visa = new SalesOrderFormModel();
            try
            {

                cmd = new MySqlCommand("sp_sel_sovisaedit");
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("p_visaservice_gid", val.visaservice_gid);
                rd = DBAccess.ExecuteReader(cmd);
                if (rd.Read())
                {
                    val.visaservice_gid = rd["visaservice_gid"].ToString();
                    val.passenger_name = rd["passenger_name"].ToString();
                    val.passengerservice_gid = rd["passengerservice_gid"].ToString();
                    val.salesorder_gid = int.Parse(rd["salesorder_gid"].ToString());  
                    val.country = rd["country"].ToString();
                    val.application_date = rd["application_date"].ToString();
                    val.expiry_date = rd["expiry_date"].ToString();
                    val.visa_period = int.Parse(rd["visa_period"].ToString());
                    val.currency = rd["currency"].ToString();
                    val.amount = int.Parse(rd["amount"].ToString());
                    val.status = true;
                }
                else
                {
                    val.status = false;
                    val.message = "Internal Error Occured";
                }
                rd.Close();
            }
            catch (Exception ex)
            {
                val.status = false;
                val.message = "Internal Error Occured";
                error = ex.ToString();
            }
            finally
            {
                if (cmd.Connection.State == System.Data.ConnectionState.Open)
                {
                    cmd.Connection.Close();
                }
            }
            return val;
        }

        public SalesOrderFormModel soflightedit(SOFlightDetail val, string usergid)
        {
            // SalesOrderFormModel visa = new SalesOrderFormModel();
            try
            {
                cmd = new MySqlCommand("sp_sel_soflightedit");
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("p_flightservice_gid", val.flightservice_gid);
                rd = DBAccess.ExecuteReader(cmd);
                if (rd.Read())
                {
                    val.flightservice_gid = rd["flightservice_gid"].ToString();
                    val.flight_name = rd["flight_name"].ToString();
                    val.flight_from = rd["flight_from"].ToString();
                    val.salesorder_gid = int.Parse(rd["salesorder_gid"].ToString());
                    val.flight_to = rd["flight_to"].ToString();
                    val.flight_departuredate = rd["departure_date"].ToString();
                    val.flight_time = rd["flight_time"].ToString();
                    val.flight_number = rd["flight_number"].ToString();
                    val.sector_number = rd["sector_number"].ToString();
                    val.pnr_number = rd["pnr_number"].ToString();
                    val.ticket_number = rd["ticket_number"].ToString();
                    val.currency = rd["currency"].ToString();
                    val.amount = int.Parse(rd["amount"].ToString());
                    val.remarks = rd["remarks"].ToString(); 
                    val.flight_class = rd["flight_class"].ToString();
                    val.flight_routing = rd["flight_routing"].ToString();
                    //val.flightairline = rd["flightairline"].ToString();
                    val.segment = rd["segment"].ToString();
                    val.status = true;
                    //rd.Close();

                    cmd = new MySqlCommand("sp_sel_soflightpassengereditdtl");
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("p_flightservice_gid", val.flightservice_gid);
                    rd = DBAccess.ExecuteReader(cmd);
                    var summary = new List<SOPassangerList>();
                    while (rd.Read())
                    {
                        summary.Add(new SOPassangerList
                        {
                            //salesorder_gid = rd["salesorder_gid"].ToString(),
                            passengerservice_gid = rd["passengerservice_gid"].ToString(),
                            passport_number = rd["passport_number"].ToString(),
                            passenger_name = rd["passenger_name"].ToString(),

                        });
                    }
                    
                    val.SOPassangerList = summary;
                    val.status = true;
                }
                else
                {
                    val.status = false;
                    val.message = "Internal Error Occured";
                }
                rd.Close();
            }
            catch (Exception ex)
            {
                val.status = false;
                val.message = "Internal Error Occured";
                error = ex.ToString();
            }
            finally
            {
                if (cmd.Connection.State == System.Data.ConnectionState.Open)
                {
                    cmd.Connection.Close();
                }
            }
            return val;
        }
        public SalesOrderFormModel sohoteledit(SOHotelDetail val, string usergid)
        {
            try
            {
                cmd = new MySqlCommand("sp_sel_sohoteledit");
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("p_hotelservice_gid", val.hotelservice_gid);
                rd = DBAccess.ExecuteReader(cmd);
                if (rd.Read())
                {
                    val.hotelservice_gid = rd["hotelservice_gid"].ToString();
                    val.hotel_name = rd["hotel_name"].ToString();
                    val.category = rd["category"].ToString();
                    val.salesorder_gid = int.Parse(rd["salesorder_gid"].ToString());
                    val.city = rd["city"].ToString();
                    val.destination = rd["destination"].ToString();
                    val.check_in = rd["check_in"].ToString();
                    val.check_out = rd["check_out"].ToString();
                    val.total_numberofdays = int.Parse(rd["total_numberofdays"].ToString());
                    val.total_numberofpassengers = int.Parse(rd["total_noofpassengers"].ToString());
                    val.amount = int.Parse(rd["amount"].ToString());
                    val.currency = rd["currency"].ToString();
                    val.status = true;
                }
                else
                {
                    val.status = false;
                    val.message = "Internal Error Occured";
                }
                rd.Close();
            }
            catch (Exception ex)
            {
                val.status = false;
                val.message = "Internal Error Occured";
                error = ex.ToString();
            }
            finally
            {
                if (cmd.Connection.State == System.Data.ConnectionState.Open)
                {
                    cmd.Connection.Close();
                }
            }
            return val;
        }
        public SalesOrderFormModel socaredit(SOCarDetail val, string usergid)
        {
            try
            {
                cmd = new MySqlCommand("sp_sel_socaredit");
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("p_carservice_gid", val.cargid);
                rd = DBAccess.ExecuteReader(cmd);
                if (rd.Read())
                {
                    val.cargid = rd["carservice_gid"].ToString();
                    //val.cartype = rd["car_type"].ToString();
                    val.category = rd["car_type"].ToString();
                    val.salesorder_gid = int.Parse(rd["salesorder_gid"].ToString());
                    //val.city = rd["city"].ToString();
                    val.pickup_city = rd["pickup_city"].ToString();
                    val.drop_city = rd["drop_city"].ToString();
                    val.from_date = rd["from_date"].ToString();
                    val.to_date = rd["to_date"].ToString();
                    val.numberof_persons = int.Parse(rd["numberof_persons"].ToString());
                    val.currency = rd["currency"].ToString();
                    val.amount = int.Parse(rd["amount"].ToString());
                    val.remarks = rd["remarks"].ToString();
                    val.status = true;
                }
                else
                {
                    val.status = false;
                    val.message = "Internal Error Occured";
                }
                rd.Close();
            }
            catch (Exception ex)
            {
                val.status = false;
                val.message = "Internal Error Occured";
                error = ex.ToString();
            }
            finally
            {
                if (cmd.Connection.State == System.Data.ConnectionState.Open)
                {
                    cmd.Connection.Close();
                }
            }
            return val;
        }
        public SalesOrderFormModel soforexedit(SOForexDetail val, string usergid)
        {
            try
            {
                cmd = new MySqlCommand("sp_sel_soforexedit");
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("p_forexservice_gid", val.forexgid);
                rd = DBAccess.ExecuteReader(cmd);
                if (rd.Read())
                {
                    val.forexgid = rd["forexservice_gid"].ToString();
                    val.customerpaid_amount = int.Parse(rd["customerpaid_amount"].ToString());
                    val.customerreceived_amount = int.Parse(rd["customerreceived_amount"].ToString());
                    val.salesorder_gid = int.Parse(rd["salesorder_gid"].ToString());
                    val.paidamount_exchangerate = rd["paidamount_exchangerate"].ToString();
                    val.total_paidamount = int.Parse(rd["total_paidamount"].ToString());
                    val.total_receivedamount = int.Parse(rd["total_receivedamount"].ToString());//customerreceived_amount
                    val.receivedamount_exchangerate = rd["receivedamount_exchangerate"].ToString();
                    val.paidamount_currency = rd["paidamount_currency"].ToString();
                    val.receivedamount_currency = rd["receivedamount_currency"].ToString();
                    val.remarks = rd["remarks"].ToString();
                    val.status = true;
                }
                else
                {
                    val.status = false;
                    val.message = "Internal Error Occured";
                }
                rd.Close();
            }
            catch (Exception ex)
            {
                val.status = false;
                val.message = "Internal Error Occured";
                error = ex.ToString();
            }
            finally
            {
                if (cmd.Connection.State == System.Data.ConnectionState.Open)
                {
                    cmd.Connection.Close();
                }
            }
            return val;
        }
        public SalesOrderFormModel soinsuranceedit(SOInsurenceDetail val, string usergid)
        {
            try
            {
                cmd = new MySqlCommand("sp_sel_soinsuranceedit");
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("p_insuranceservice_gid", val.insuranceservice_gid);
                rd = DBAccess.ExecuteReader(cmd);
                if (rd.Read())
                {
                    val.passengerservice_gid = rd["passengerservice_gid"].ToString();
                    val.insuranceservice_gid = rd["insuranceservice_gid"].ToString();
                    val.name = rd["name"].ToString();
                    val.dob = rd["dob"].ToString();
                    val.salesorder_gid = int.Parse(rd["salesorder_gid"].ToString());
                    val.arrival_port = rd["arrival_port"].ToString();
                    val.start_date = rd["start_date"].ToString();
                    val.end_date = rd["end_date"].ToString();//customerreceived_amount
                    val.currency = rd["currency"].ToString();
                    val.amount = int.Parse(rd["amount"].ToString());
                    val.remarks = rd["remarks"].ToString();
                    val.status = true;
                }
                else
                {
                    val.status = false;
                    val.message = "Internal Error Occured";
                }
            }
            catch (Exception ex)
            {
                val.status = false;
                val.message = "Internal Error Occured";
                error = ex.ToString();
            }
            finally
            {
                if (cmd.Connection.State == System.Data.ConnectionState.Open)
                {
                    cmd.Connection.Close();
                }
            }
            return val;
        }
        public SalesOrderFormModel sopassportedit(SOPassportDetail val, string usergid)
        {
            try
            {
                cmd = new MySqlCommand("sp_sel_sopassportedit");
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("p_passportservice_gid", val.passportservice_gid);
                rd = DBAccess.ExecuteReader(cmd);
                if (rd.Read())
                {
                    val.passengerservice_gid = rd["passengerservice_gid"].ToString();
                    val.passportservice_gid = rd["passportservice_gid"].ToString();
                    val.passenger_name = rd["passenger_name"].ToString();
                    val.salesorder_gid = int.Parse(rd["salesorder_gid"].ToString());
                    val.id_proof = rd["id_proof"].ToString();
                    val.additional_proof = rd["additional_proof"].ToString();
                    val.anygovt_document = rd["anygovt_document"].ToString();
                    //val.uploaddocument = rd["currency"].ToString();
                    val.photo = int.Parse(rd["photo"].ToString());
                    val.amount = int.Parse(rd["amount"].ToString());

                    val.status = true;
                }
                else
                {
                    val.status = false;
                    val.message = "Internal Error Occured";
                }
                rd.Close();
            }
            catch (Exception ex)
            {
                val.status = false;
                val.message = "Internal Error Occured";
                error = ex.ToString();
            }
            finally
            {
                if (cmd.Connection.State == System.Data.ConnectionState.Open)
                {
                    cmd.Connection.Close();
                }
            }
            return val;
        }
        public SalesOrderFormModel sopackageedit(SOPackageDetail val, string usergid)
        {
            try
            {
                cmd = new MySqlCommand("sp_sel_sopackageedit");
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("p_packageservice_gid", val.packageservice_gid);
                rd = DBAccess.ExecuteReader(cmd);
                if (rd.Read())
                {
                    //val.passengerservice_gid = rd["insuranceservice_gid"].ToString();
                    val.packageservice_gid = rd["packageservice_gid"].ToString();
                    val.amount = int.Parse(rd["amount"].ToString());
                    val.salesorder_gid = int.Parse(rd["salesorder_gid"].ToString());
                    val.remarks = rd["remarks"].ToString();
                    val.status = true;
                }
                else
                {
                    val.status = false;
                    val.message = "Internal Error Occured";
                }
            }
            catch (Exception ex)
            {
                val.status = false;
                val.message = "Internal Error Occured";
                error = ex.ToString();
            }
            finally
            {
                if (cmd.Connection.State == System.Data.ConnectionState.Open)
                {
                    cmd.Connection.Close();
                }
            }
            return val;
        }
        public SalesOrderFormModel sopassengerupdate(SOPassengerDetail val, string usergid)
        {
            SalesOrderFormModel passengerupt = new SalesOrderFormModel();
            try
            {
                cmd = new MySqlCommand("sp_upt_sopassenger");
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("p_passengerservice_gid", val.passengerservice_gid);
                cmd.Parameters.AddWithValue("P_passanger_firstname", val.passanger_firstname);
                cmd.Parameters.AddWithValue("P_passanger_lastname", val.passanger_lastname);
                cmd.Parameters.AddWithValue("p_gender", val.gender);
                cmd.Parameters.AddWithValue("p_dob", val.dob);
                cmd.Parameters.AddWithValue("p_passport_number", val.passport_number);
                cmd.Parameters.AddWithValue("p_passport_issueddate", val.passport_issueddate);
                cmd.Parameters.AddWithValue("p_passport_expirydate", val.passport_expirydate);
                cmd.Parameters.AddWithValue("p_created_by", usergid);
                cmd.Parameters.AddWithValue("p_salesorder_gid", val.salesorder_gid);
                mnrestult = DBAccess.ExecuteNonQuery(cmd);
                if (mnrestult == 1)
                {
                    val.status = true;
                    val.message = "Added Successfully!";
                }
                else
                {
                    val.status = false;
                    val.message = "Internal Error Occured!";
                }
            }
            catch (Exception ex)
            {
                error = ex.ToString();
            }
            finally
            {
                if (cmd.Connection.State == System.Data.ConnectionState.Open)
                {
                    cmd.Connection.Close();
                }
            }
            return val;
        }
        public SalesOrderFormModel sovisaupdate(SOVisaDetail val, string usergid)
        {
            SalesOrderFormModel visaupt = new SalesOrderFormModel();
            try
            {
                cmd = new MySqlCommand("sp_upt_sovisa");
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("p_visaservice_gid", val.visaservice_gid);
                cmd.Parameters.AddWithValue("p_salesorder_gid", val.salesorder_gid);
                cmd.Parameters.AddWithValue("p_passenger_name", val.passenger_name);
                cmd.Parameters.AddWithValue("p_passengerservice_gid", val.passengerservice_gid);
                cmd.Parameters.AddWithValue("p_country", val.country);
                cmd.Parameters.AddWithValue("p_application_date", val.application_date);
                cmd.Parameters.AddWithValue("p_visa_period", val.visa_period);
                cmd.Parameters.AddWithValue("p_expiry_date", val.expiry_date);
                cmd.Parameters.AddWithValue("p_currency", val.currency);
                cmd.Parameters.AddWithValue("p_amount", val.amount);
                cmd.Parameters.AddWithValue("p_created_by", usergid);
                //cmd.Parameters.AddWithValue("p_passport_no", "");
                //cmd.Parameters.AddWithValue("p_reference_gid", 0);
                mnrestult = DBAccess.ExecuteNonQuery(cmd);
                if (mnrestult == 1)
                {
                    val.status = true;
                }
                else
                {
                    val.status = false;
                    val.message = "Internal Error Occured!";
                }
            }
            catch (Exception ex)
            {
                error = ex.ToString();
            }
            finally
            {
                if (cmd.Connection.State == System.Data.ConnectionState.Open)
                {
                    cmd.Connection.Close();
                }
            }
            return val;
        }
        public SalesOrderFormModel soflightupdate(SOFlightDetail val, string usergid)
        {
            SalesOrderFormModel flight = new SalesOrderFormModel();
            try
            {
                cmd = new MySqlCommand("sp_upt_soflight");
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("p_flightservice_gid", val.flightservice_gid);
                cmd.Parameters.AddWithValue("p_salesorder_gid", val.salesorder_gid);
                cmd.Parameters.AddWithValue("p_flight_number", val.flight_number);
                cmd.Parameters.AddWithValue("p_flight_name", val.flight_name);
                cmd.Parameters.AddWithValue("p_flight_departuredate", val.flight_departuredate);
                cmd.Parameters.AddWithValue("p_flight_time", val.flight_time);
                cmd.Parameters.AddWithValue("p_flight_from", val.flight_from);
                cmd.Parameters.AddWithValue("p_flight_to", val.flight_to);
                cmd.Parameters.AddWithValue("p_currency", val.currency);
                cmd.Parameters.AddWithValue("p_pnrno", val.pnr_number);
                cmd.Parameters.AddWithValue("p_ticket_number", val.ticket_number);
                cmd.Parameters.AddWithValue("p_sector_number", val.sector_number);
                cmd.Parameters.AddWithValue("p_amount", val.amount);
                cmd.Parameters.AddWithValue("p_remarks", val.remarks);
                cmd.Parameters.AddWithValue("p_created_by", usergid);
                //cmd.Parameters.AddWithValue("p_reference_gid", 0);
                cmd.Parameters.AddWithValue("p_flight_class", val.flight_class);
                cmd.Parameters.AddWithValue("p_segment", val.segment);
                cmd.Parameters.AddWithValue("p_flight_airline", "");
                cmd.Parameters.AddWithValue("p_flight_routing", val.flight_routing);
                mnrestult = DBAccess.ExecuteNonQuery(cmd);
                if (mnrestult == 1)
                {
                    val.status = true;
                    val.message = "Records updated sucessfully";
                }
                else
                {
                    val.status = false;
                    val.message = "Internal Error Occured!";
                }

            }
            catch (Exception ex)
            {
                val.status = false;
                val.message = "Internal Error Occured!";
                error = ex.ToString();
            }
            finally
            {
                if (cmd.Connection.State == System.Data.ConnectionState.Open)
                {
                    cmd.Connection.Close();
                }
            }
            return val;
        }
        public SalesOrderFormModel sohotelupdate(SOHotelDetail val, string usergid)
        {
            SalesOrderFormModel hotelupt = new SalesOrderFormModel();
            try
            {
                cmd = new MySqlCommand("sp_upt_sohotel");
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("p_hotelservice_gid", val.hotelservice_gid);
                cmd.Parameters.AddWithValue("p_salesorder_gid", val.salesorder_gid);
                cmd.Parameters.AddWithValue("p_hotel_name", val.hotel_name);
                cmd.Parameters.AddWithValue("p_category", val.category);
                cmd.Parameters.AddWithValue("p_city", val.city);
                cmd.Parameters.AddWithValue("p_destination", val.destination);
                cmd.Parameters.AddWithValue("p_check_in", val.check_in);
                cmd.Parameters.AddWithValue("p_check_out", val.check_out);
                cmd.Parameters.AddWithValue("p_total_noofdays", val.total_numberofdays);
                cmd.Parameters.AddWithValue("p_total_noofpassengers", val.total_numberofpassengers);
                cmd.Parameters.AddWithValue("p_currency", val.currency);
                cmd.Parameters.AddWithValue("p_amount", val.amount);
                cmd.Parameters.AddWithValue("p_created_by", usergid);
                //cmd.Parameters.AddWithValue("p_reference_gid", 0);
                mnrestult = DBAccess.ExecuteNonQuery(cmd);
                if (mnrestult == 1)
                {
                    val.status = true;
                }
                else
                {
                    val.status = false;
                    val.message = "Internal Error Occured!";
                }
            }
            catch (Exception ex)
            {
                error = ex.ToString();
            }
            finally
            {
                if (cmd.Connection.State == System.Data.ConnectionState.Open)
                {
                    cmd.Connection.Close();
                }
            }
            return val;
        }
        public SalesOrderFormModel socarupdate(SOCarDetail val, string usergid)
        {
            SalesOrderFormModel car = new SalesOrderFormModel();
            try
            {
                cmd = new MySqlCommand("sp_upt_socar");
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("p_carservice_gid", val.cargid);
                cmd.Parameters.AddWithValue("P_salesorder_gid", val.salesorder_gid);
                cmd.Parameters.AddWithValue("p_car_type", val.category);
                cmd.Parameters.AddWithValue("p_from_date", val.from_date);
                cmd.Parameters.AddWithValue("p_to_date", val.to_date);
                cmd.Parameters.AddWithValue("p_pickup_city", val.pickup_city);
                cmd.Parameters.AddWithValue("p_drop_city", val.drop_city);
                cmd.Parameters.AddWithValue("p_noof_persons", val.numberof_persons);
                cmd.Parameters.AddWithValue("p_remarks", val.remarks);
                cmd.Parameters.AddWithValue("p_currency", val.currency);
                cmd.Parameters.AddWithValue("p_amount", val.amount);
                cmd.Parameters.AddWithValue("p_created_by", usergid);
                //cmd.Parameters.AddWithValue("p_reference_gid", 0);
                //cmd.Connection = con;
                mnrestult = DBAccess.ExecuteNonQuery(cmd);
                if (mnrestult == 1)
                {
                    val.status = true;
                }
                else
                {
                    val.status = false;
                    val.message = "Internal Error Occured!";
                }
            }
            catch (Exception ex)
            {
                val.status = false;
                val.message = "Internal Error Occured!";
                error = ex.ToString();
            }
            finally
            {
                if (cmd.Connection.State == System.Data.ConnectionState.Open)
                {
                    cmd.Connection.Close();
                }
            }
            return val;
        }
        public SalesOrderFormModel soforexupdate(SOForexDetail val, string usergid)
        {
            SalesOrderFormModel forex = new SalesOrderFormModel();
            try
            {

                cmd = new MySqlCommand("sp_upt_soforex");
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("p_forexservice_gid", val.forexgid);
                cmd.Parameters.AddWithValue("P_salesorder_gid", val.salesorder_gid);
                cmd.Parameters.AddWithValue("p_customerpaid_amount", val.customerpaid_amount);
                cmd.Parameters.AddWithValue("p_customerreceived_amount", val.customerreceived_amount);
                cmd.Parameters.AddWithValue("p_total_paidamount", val.total_paidamount);
                cmd.Parameters.AddWithValue("p_total_receivedamount", val.total_receivedamount);
                //cmd.Parameters.AddWithValue("p_paidamount_exchangerate", val.paidexchangerate);
                //cmd.Parameters.AddWithValue("p_receivedamount_exchangerate", val.receiveexchangerate);
                cmd.Parameters.AddWithValue("p_paidamount_currency", val.paidamount_currency);
                cmd.Parameters.AddWithValue("p_receivedamount_currency", val.receivedamount_currency);
                cmd.Parameters.AddWithValue("p_remarks", val.remarks);
                cmd.Parameters.AddWithValue("p_created_by", usergid);
                // cmd.Parameters.AddWithValue("p_reference_gid", 0);
                mnrestult = DBAccess.ExecuteNonQuery(cmd);
                if (mnrestult == 1)
                {
                    val.status = true;
                }
                else
                {
                    val.status = false;
                    val.message = "Internal Error Occured!";
                }
            }
            catch (Exception ex)
            {
                val.status = false;
                val.message = "Internal Error Occured!";
                error = ex.ToString();
            }
            finally
            {
                if (cmd.Connection.State == System.Data.ConnectionState.Open)
                {
                    cmd.Connection.Close();
                }
            }
            return val;
        }
        public SalesOrderFormModel soinsuranceupdate(SOInsurenceDetail val, string usergid)
        {
            SalesOrderFormModel insurance = new SalesOrderFormModel();
            try
            {
                cmd = new MySqlCommand("sp_upt_soinsurance");
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("p_insuranceservice_gid", val.insuranceservice_gid);
                cmd.Parameters.AddWithValue("p_salesorder_gid", val.salesorder_gid);
                cmd.Parameters.AddWithValue("p_name", val.name);
                cmd.Parameters.AddWithValue("p_dob", val.dob);
                cmd.Parameters.AddWithValue("p_arrival_port", val.arrival_port);
                cmd.Parameters.AddWithValue("p_start_date", val.start_date);
                cmd.Parameters.AddWithValue("p_end_date", val.end_date);
                cmd.Parameters.AddWithValue("p_currency", val.currency);
                cmd.Parameters.AddWithValue("p_amount", val.amount);
                cmd.Parameters.AddWithValue("p_remarks", val.remarks);
                cmd.Parameters.AddWithValue("p_created_by", usergid);
                //cmd.Parameters.AddWithValue("p_reference_gid", 0);
                cmd.Parameters.AddWithValue("p_passenger_name", "");
                //cmd.Connection = con;
                mnrestult = DBAccess.ExecuteNonQuery(cmd);
                if (mnrestult == 1)
                {
                    val.status = true;
                    val.message = "Updated Successfully!";
                }
                else
                {
                    val.status = false;
                    val.message = "Internal Error Occured!";
                }
            }
            catch (Exception ex)
            {
                val.status = false;
                val.message = "Internal Error Occured!";
                error = ex.ToString();
            }
            finally
            {
                if (cmd.Connection.State == System.Data.ConnectionState.Open)
                {
                    cmd.Connection.Close();
                }
            }
            return val;
        }
        public SalesOrderFormModel sopassportupdate(SOPassportDetail val, string usergid)
        {
            try
            {
                cmd = new MySqlCommand("sp_upt_sopassport");
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("p_passportservice_gid", val.passportservice_gid);
                cmd.Parameters.AddWithValue("p_salesorder_gid", val.salesorder_gid);
                cmd.Parameters.AddWithValue("p_passengerservice_gid", val.passengerservice_gid);  // changes made
                cmd.Parameters.AddWithValue("p_passenger_name", "");
                cmd.Parameters.AddWithValue("p_id_proof", val.id_proof);
                cmd.Parameters.AddWithValue("p_additional_proof", val.additional_proof);
                cmd.Parameters.AddWithValue("p_photo", val.photo);
                cmd.Parameters.AddWithValue("p_anygovt_document", val.anygovt_document);
                cmd.Parameters.AddWithValue("p_amount", val.amount);
                //cmd.Parameters.AddWithValue("p_upload_documents", val.insamount);
                cmd.Parameters.AddWithValue("p_created_by", usergid);
                mnrestult = DBAccess.ExecuteNonQuery(cmd);
                if (mnrestult == 1)
                {
                    val.status = true;
                    val.message = "Updated Successfully!";
                }
                else
                {
                    val.status = false;
                    val.message = "Internal Error Occured";
                }
            }
            catch (Exception ex)
            {
                val.status = true;
                val.message = "Internal Error Occured";
                error = ex.ToString();
            }
            finally
            {
                if (cmd.Connection.State == System.Data.ConnectionState.Open)
                {
                    cmd.Connection.Close();
                }
            }
            return val;
        }
        public SalesOrderFormModel sopackageupdate(SOPackageDetail val, string usergid)
        {
            try
            {
                cmd = new MySqlCommand("sp_upt_sopackage");
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("p_packageservice_gid", val.packageservice_gid);
                cmd.Parameters.AddWithValue("p_salesorder_gid", val.salesorder_gid);
                cmd.Parameters.AddWithValue("p_amount", val.amount);
                cmd.Parameters.AddWithValue("p_remarks", val.remarks);
                cmd.Parameters.AddWithValue("p_created_by", usergid);
                mnrestult = DBAccess.ExecuteNonQuery(cmd);
                if (mnrestult == 1)
                {
                    val.status = true;
                    val.message = "Updated Successfully!";
                }
                else
                {
                    val.status = false;
                    val.message = "Internal Error Occured";
                }

            }
            catch (Exception ex)
            {
                val.status = true;
                val.message = "Internal Error Occured";
                error = ex.ToString();
            }
            finally
            {
                if (cmd.Connection.State == System.Data.ConnectionState.Open)
                {
                    cmd.Connection.Close();
                }
            }
            return val;
        }
        public customer sofcustomer2(Customerdetails val)
        {
            customer sof = new customer();
            try
            {
                cmd = new MySqlCommand("sp_sel_customersalesall");
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("p_customer_type", val.customer_type);
                rd = DBAccess.ExecuteReader(cmd);
                if (rd.HasRows == true)
                {
                    sof.customer_name = "[";
                    while (rd.Read())
                    {
                        sof.customer_name = sof.customer_name + "," + "'" + rd["cutomer_name"].ToString() + "'";
                    }
                    sof.customer_name = sof.customer_name.Remove(1, 1);
                    sof.customer_name = sof.customer_name + "]";
                }
                rd.Close();
            }
            catch (Exception ex)
            {
                error = ex.ToString();
            }
            finally
            {
                if (cmd.Connection.State == System.Data.ConnectionState.Open)
                {
                    cmd.Connection.Close();
                }

            }
            return sof;
        }
        public SalesOrderForm sofcustomer1(Customerdetails val)
        {
            SalesOrderForm sof = new SalesOrderForm();
            try
            {
                cmd = new MySqlCommand("sp_sel_customersales");
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("p_customer_type", val.customer_type);
                rd = DBAccess.ExecuteReader(cmd);
                var summary = new List<Customerlist>();
                if (rd.HasRows == true)
                {
                    while (rd.Read())
            
                    summary.Add(new Customerlist
                    {
                        customer_gid = rd["customer_gid"].ToString(),
                        customer_name = rd["cutomer_name"].ToString(),
                        contact_number = rd["contact_number"].ToString(),
                        email_address = rd["email_address"].ToString(),
                        national_id = rd["national_id"].ToString(),
                        billing_address = rd["billing_address"].ToString()
                    });
                }
                sof.customerList = summary;
                rd.Close();
            }          
            catch (Exception ex)
            {
                error = ex.ToString();
            }
            finally
            {
                if (cmd.Connection.State == System.Data.ConnectionState.Open)
                {
                    cmd.Connection.Close();
                }

            }
            return sof;
        }

        public sotempactivity softempactivitydelete(sotempactivity val,string usergid)
        {
            sotempactivity sotempactivitydelte = new sotempactivity();
            try
            {
                cmd = new MySqlCommand("sp_del_tempactivity");
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("p_created_by", usergid);
                cmd.Parameters.AddWithValue("p_activity_source", val.activity_source);
                mnrestult = DBAccess.ExecuteNonQuery(cmd);
                if (mnrestult==1)
                {
                    val.status = true;
                    val.message = "Temp Activity Deleted Successfully";

                }
                else
                {
                    val.status = false;
                    val.message = " Error Occured while delete Temp Activity !";
                }

            }
            catch (Exception ex)
            {
                error = ex.ToString();
            }
            finally
            {
                if (cmd.Connection.State == System.Data.ConnectionState.Open)
                {
                    cmd.Connection.Close();
                }
            }

            return val;
        }
    }
}